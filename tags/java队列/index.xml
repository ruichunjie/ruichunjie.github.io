<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java队列 on 空谷芝兰</title>
    <link>https://ruichunjie.github.io/tags/java%E9%98%9F%E5%88%97/</link>
    <description>Recent content in java队列 on 空谷芝兰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Apr 2019 10:25:46 +0800</lastBuildDate>
    
	<atom:link href="https://ruichunjie.github.io/tags/java%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>queue详情分析</title>
      <link>https://ruichunjie.github.io/2019/queue20190410/</link>
      <pubDate>Wed, 10 Apr 2019 10:25:46 +0800</pubDate>
      
      <guid>https://ruichunjie.github.io/2019/queue20190410/</guid>
      <description>Queue的实现 1. 没有实现的阻塞接口: 实现了java.util.Queue接口和java.util.AbstractQueue接口 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;内置的不阻塞队列: PriorityQueue 和ConcurrentLinkedQueue
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PriorityQueue类实质上维护了一个有序列表，加入到Queue中的元素根据它们的天然排序(通过其java.util.Comparable实现)或者根据传递给构造函数的java.util.Comparator实现来定位。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConcurrentLinkedQueue是基于链接节点的，线程安全的队列。并发访问不需要同步，因为在队列的尾部添加元素，并从头部删除它们，所以不需要知道队列的大小,ConcurrentLinkedQueue对公共集合的共享访问可以工作的很好。收集关于队列大小的信息很慢，需要遍历队列。采用CAS机制(compareAndSwapObject原子操作)
2. 实现的阻塞接口: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.util.concurrent中加入了BlockingQueue接口和五个阻塞队列类它实质上就是一种带有一点扭曲的 FIFO 数据结构。不是立即从队列中添加或者删除元素，线程执行操作阻塞，直到有空间或者元素可用。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* ArrayBlockingQueue: 一个由数组支持的有界队列，在构造时需要指定容量,并可以选择是否需要公平性，如果公平参数设置为true，等待时间最长的线程会优先得到处理(其实就是通过ReentrantLock设置为true来达到公平性:即等待时间最长的线程会先操作)。公平性会使性能付出代价，只有在非常需要的时候使用。基于数组，FIFO原则排序。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* LinkedBlockingQueue: 一个由链接节点支持的可选有界队列,容量是没有上限的(在不指定时，容量为Integer.MAX_VALUE),FIFO排序元素
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* PriorityBlockingQueue: 一个由优先级堆支持的无界优先级队列，不再是先进先出。队列没有上限，put时不会受阻
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* DelayQueue: 一个由优先级堆支持的,基于时间的调度队列。只有在延迟期满才能提取元素，头部是延迟期满后保存时间最长的Delayed元素。如果延迟没有期满，则队列没有头部，poll返回null。当一个元素的getDelay(TimeUnit.NANOSECONDS)方法返回一个小于或等于零的值时，出现期满。poll移除该元素，
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* SynchronousQueue: 一个利用BlockingQueue接口的简单聚集(rendezvous)机制
阻塞队列操作   操作 作用 状态   add 添加一个元素 队列已满，抛出IIIegaISlabEepeplian异常   remove 移除并返回队列头部的元素 队列已空，抛出NoSuchElementException异常   element 返回队列头部的元素 队列已空，抛出NoSuchElementException异常   offer 添加一个元素，并返回true 队列已满，返回false   poll 移除并访问队列头部的元素 队列为空，返回null   peek 返回队列头部的元素 队列为空，返回null   put 添加一个元素 队列已满，阻塞   take 移除并返回队列头部的元素 队列为空，阻塞   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;阻塞队列的操作根据响应方式可以分为三类add, remove和element操作在视图在为一个已满队列添加元素或从空队列中取得元素时抛出异常。</description>
    </item>
    
  </channel>
</rss>