<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java集合 on 空谷芝兰</title>
    <link>https://ruichunjie.github.io/tags/java%E9%9B%86%E5%90%88/</link>
    <description>Recent content in java集合 on 空谷芝兰</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Apr 2019 19:56:03 +0800</lastBuildDate>
    
	<atom:link href="https://ruichunjie.github.io/tags/java%E9%9B%86%E5%90%88/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Map详情分析</title>
      <link>https://ruichunjie.github.io/2019/map20190410/</link>
      <pubDate>Wed, 10 Apr 2019 19:56:03 +0800</pubDate>
      
      <guid>https://ruichunjie.github.io/2019/map20190410/</guid>
      <description>Map HashMap &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为Null(多条会覆盖);允许多条记录的值为 Null。非同步的。
TreeMap &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;能够把它保存的记录根据键(key)排序,默认是按升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。
Hashtable &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;与HashMap类似,不同的是:key和value的值均不允许为null;它支持线程的同步
LinkedHashMap &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;保存了记录的插入顺序,key和value均允许为空，非同步的
常用API   方法 描述   clear() 从Map中删除所有映射   remove(Object key) 从Map中删除键和关联的值   put(Object key,Object value) 将指定值与指定键相关联   putAll(Map t) 将指定Map中的所有映射复制到此map   entrySet() 返回Map中所包含映射的Set视图。Set中的每个元素都是一个Map.Entry对象，可以使用getKey()和getValue()方法(还有setValue()方法)访问后者的键元素和值元素   values() 返回map中所包含值的Collection视图。删除Collection中的元素还将删除Map中相关的映射(键和值)   get(Object key) 返回与指定键相关联的值   containsKey(Object key) 如果Map包含指定键的映射，则返回true   containsValue(Object Value) 如果此Map将一个或多个键映射到指定值，则返回true   isEmpty() 如果Map中不包含键值映射，则返回true   size() 返回键值映射的数目</description>
    </item>
    
    <item>
      <title>List详情分析</title>
      <link>https://ruichunjie.github.io/2019/list20190410/</link>
      <pubDate>Wed, 10 Apr 2019 18:26:27 +0800</pubDate>
      
      <guid>https://ruichunjie.github.io/2019/list20190410/</guid>
      <description>List &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List是一个有序的集合，和set不同的是，List允许存储项的值为空，也允许存储相等值的存储项
ArrayList &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ArrayList是一个数组实现的列表，特点是查询很快，插入和删除很慢。
Vector &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Vector就是ArrayList的线程安全版，它的方法前都加了synchronized锁。
LinkedList &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LinkedList继承于AbstractSequentialList,和ArrayList一个套路。内部维护了3个成员变量，一个是当前链表的头节点，一个是尾部节点，还有是链表长度。
总结 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List的3个特性  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* 1.是按顺序查找  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* 2.允许存储项为空  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* 3.允许多个存储项的值相等  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LinkedList和ArrayList对比 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* ArrayList是由数组实现的，方便查找，返回数组下标对应的值即可，适用于多查找的场景  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* sLinkedList由链表实现，插入和删除方便，适用于多次数据替换的场景</description>
    </item>
    
    <item>
      <title>Set详情分析</title>
      <link>https://ruichunjie.github.io/2019/set20190410/</link>
      <pubDate>Wed, 10 Apr 2019 16:55:21 +0800</pubDate>
      
      <guid>https://ruichunjie.github.io/2019/set20190410/</guid>
      <description>Set &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用于存储无序(存入和取出的顺序不一定相同)元素，值不能重复。
HashSet &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;线程不安全，存取速度快。底层是以hash表实现的。哈希表存放的是哈希值。HashSet不存入重复元素的规则，使用hashcode() 和equals()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当试图把对象加入HashSet时，HashSet会使用对象的HashCode来判断对象加入的位置。同时也会与其他已经加入的对象的hashCode进行比较。哈希值一样会继续比较equals()方法，如果结果为true，HashSet就视为同一个元素，否则不是同一元素。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;add()返回的是boolean类型。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HashSet和ArrayList集合中都有判断元素是否相同的方法(boolean. contains(Object o))。HashSet使用了hashCode()和equals()方法，ArrayList使用了equal()方法
TreeSet &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;红-黑树的数据结构，默认对元素进行自然排序（String）。如果在比较的时候两个对象返回值为0，那么元素重复。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;红黑树的规则: 左小右大
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;比较时有两种方式:1&amp;gt;元素自身具备比较性，实现Comparable接口；2&amp;gt;容器具有比较性，实现Comparator接口。当两种形式都存在时，以comparator的比较方式为主。比较时通过return 0来判断唯一性，所以不能直接return 0
LinkedHashSet &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;会保存插入的顺序。</description>
    </item>
    
    <item>
      <title>queue详情分析</title>
      <link>https://ruichunjie.github.io/2019/queue20190410/</link>
      <pubDate>Wed, 10 Apr 2019 10:25:46 +0800</pubDate>
      
      <guid>https://ruichunjie.github.io/2019/queue20190410/</guid>
      <description>Queue的实现 1. 没有实现的阻塞接口: 实现了java.util.Queue接口和java.util.AbstractQueue接口 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;内置的不阻塞队列: PriorityQueue 和ConcurrentLinkedQueue
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PriorityQueue类实质上维护了一个有序列表，加入到Queue中的元素根据它们的天然排序(通过其java.util.Comparable实现)或者根据传递给构造函数的java.util.Comparator实现来定位。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ConcurrentLinkedQueue是基于链接节点的，线程安全的队列。并发访问不需要同步，因为在队列的尾部添加元素，并从头部删除它们，所以不需要知道队列的大小,ConcurrentLinkedQueue对公共集合的共享访问可以工作的很好。收集关于队列大小的信息很慢，需要遍历队列。采用CAS机制(compareAndSwapObject原子操作)
2. 实现的阻塞接口: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;java.util.concurrent中加入了BlockingQueue接口和五个阻塞队列类它实质上就是一种带有一点扭曲的 FIFO 数据结构。不是立即从队列中添加或者删除元素，线程执行操作阻塞，直到有空间或者元素可用。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* ArrayBlockingQueue: 一个由数组支持的有界队列，在构造时需要指定容量,并可以选择是否需要公平性，如果公平参数设置为true，等待时间最长的线程会优先得到处理(其实就是通过ReentrantLock设置为true来达到公平性:即等待时间最长的线程会先操作)。公平性会使性能付出代价，只有在非常需要的时候使用。基于数组，FIFO原则排序。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* LinkedBlockingQueue: 一个由链接节点支持的可选有界队列,容量是没有上限的(在不指定时，容量为Integer.MAX_VALUE),FIFO排序元素
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* PriorityBlockingQueue: 一个由优先级堆支持的无界优先级队列，不再是先进先出。队列没有上限，put时不会受阻
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* DelayQueue: 一个由优先级堆支持的,基于时间的调度队列。只有在延迟期满才能提取元素，头部是延迟期满后保存时间最长的Delayed元素。如果延迟没有期满，则队列没有头部，poll返回null。当一个元素的getDelay(TimeUnit.NANOSECONDS)方法返回一个小于或等于零的值时，出现期满。poll移除该元素，
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* SynchronousQueue: 一个利用BlockingQueue接口的简单聚集(rendezvous)机制
阻塞队列操作   操作 作用 状态   add 添加一个元素 队列已满，抛出IIIegaISlabEepeplian异常   remove 移除并返回队列头部的元素 队列已空，抛出NoSuchElementException异常   element 返回队列头部的元素 队列已空，抛出NoSuchElementException异常   offer 添加一个元素，并返回true 队列已满，返回false   poll 移除并访问队列头部的元素 队列为空，返回null   peek 返回队列头部的元素 队列为空，返回null   put 添加一个元素 队列已满，阻塞   take 移除并返回队列头部的元素 队列为空，阻塞   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;阻塞队列的操作根据响应方式可以分为三类add, remove和element操作在视图在为一个已满队列添加元素或从空队列中取得元素时抛出异常。</description>
    </item>
    
  </channel>
</rss>